trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  BACKEND_DIR: "."
  FRONTEND_DIR: "ui-react"
  ARTIFACT_BACKEND: "backend-jar"
  ARTIFACT_FRONTEND: "frontend-dist"

  AZURE_SERVICE_CONN: "rg-igw-demo"   # emri i SC qÃ« ke
  AZ_RESOURCE_GROUP: "rg-igw-demo"
  WEBAPP_NAME: "igw-backend-app"
  STORAGE_NAME: "stigmfrontendisme01"

stages:
- stage: Build
  displayName: Build backend & frontend
  jobs:
  - job: backend
    steps:
      - checkout: self
      - task: Maven@4
        inputs:
          mavenPomFile: '$(BACKEND_DIR)/pom.xml'
          goals: 'package'
          options: '-DskipTests -ntp'
          jdkVersionOption: '1.21'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
      - bash: |
          set -e
          mkdir -p "$(Build.ArtifactStagingDirectory)/backend"
          JAR=$(ls $(BACKEND_DIR)/target/*SNAPSHOT.jar 2>/dev/null || true)
          if [ -z "$JAR" ]; then
            JAR=$(ls $(BACKEND_DIR)/target/*.jar | head -n1)
          fi
          echo "Using JAR: $JAR"
          cp "$JAR" "$(Build.ArtifactStagingDirectory)/backend/app.jar"
        displayName: "Prepare app.jar"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/backend"
          includeRootFolder: false
          archiveType: zip
          archiveFile: "$(Build.ArtifactStagingDirectory)/app.zip"
      - publish: "$(Build.ArtifactStagingDirectory)/app.zip"
        artifact: $(ARTIFACT_BACKEND)

  - job: frontend
    steps:
      - checkout: self
      - task: NodeTool@0
        inputs: { versionSpec: '20.x' }
      - task: Cache@2
        inputs:
          key: 'npm | $(Agent.OS) | $(FRONTEND_DIR)/package-lock.json'
          restoreKeys: |
            npm | $(Agent.OS)
          path: '$(FRONTEND_DIR)/node_modules'
      - bash: |
          set -e
          cd $(FRONTEND_DIR)
          npm ci
          npm run build
        displayName: "npm ci && build"
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(FRONTEND_DIR)/dist'
          ArtifactName: '$(ARTIFACT_FRONTEND)'
          publishLocation: 'Container'

- stage: Deploy
  displayName: Deploy to Azure
  dependsOn: Build
  jobs:
  - deployment: deploy_backend
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                artifactName: '$(ARTIFACT_BACKEND)'
                targetPath: '$(Pipeline.Workspace)/backend'
            - task: AzureCLI@2
              displayName: "Configure Web App settings"
              inputs:
                azureSubscription: '$(AZURE_SERVICE_CONN)'
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  set -e
                  az webapp config set \
                    -g "$(AZ_RESOURCE_GROUP)" -n "$(WEBAPP_NAME)" \
                    --startup-file "java -jar /home/site/wwwroot/app.jar"
            - task: AzureWebApp@1
              displayName: "Deploy backend to App Service"
              inputs:
                azureSubscription: '$(AZURE_SERVICE_CONN)'
                appName: '$(WEBAPP_NAME)'
                package: '$(Pipeline.Workspace)/backend/app.zip'

  - deployment: deploy_frontend
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                artifactName: '$(ARTIFACT_FRONTEND)'
                targetPath: '$(Pipeline.Workspace)/frontend'
            - task: AzureCLI@2
              displayName: "Enable static website & upload"
              inputs:
                azureSubscription: '$(AZURE_SERVICE_CONN)'
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  set -e
                  az storage blob service-properties update \
                    --account-name '$(STORAGE_NAME)' \
                    --auth-mode login \
                    --static-website \
                    --index-document index.html \
                    --404-document index.html
                  az storage blob upload-batch \
                    --account-name '$(STORAGE_NAME)' \
                    --auth-mode login \
                    -s '$(Pipeline.Workspace)/frontend' \
                    -d '$web' --overwrite
                  ENDPOINT=$(az storage account show -n '$(STORAGE_NAME)' \
                    --query "primaryEndpoints.web" -o tsv)
                  echo "Frontend URL => ${ENDPOINT}"
